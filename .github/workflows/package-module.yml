name: Package and Release Bears AI Chatbot Module

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

# =============================
# Universal Joomla Module Packaging Workflow
# To use for your own module, change the variables below:
#   AUTHOR: Your name or handle
#   REPO:   Your repo path (org/repo)
#   MODULE_NAME: Module folder and file prefix (e.g. mod_example)
#   MODULE_XML:  Main XML file (e.g. mod_example.xml)
#   COPYRIGHT_HOLDER: Copyright string (e.g. YourName (YourHandle))
#   PHP_VERSION: PHP version to use (e.g. 8.1)
# =============================
env:
  AUTHOR: "N6REJ"
  REPO: "N6REJ/mod_bears_aichatbot"
  MODULE_NAME: "mod_bears_aichatbot"
  MODULE_XML: "mod_bears_aichatbot.xml"
  COPYRIGHT_HOLDER: "BearLeeAble (N6REJ)"
  PHP_VERSION: "8.1"
  MODULE_TOKEN: "GH_PAT"  # Set your token secret name here (default: GH_PAT)

jobs:
  update-version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Determine workflow context
        id: context
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
              echo "is_pr_merge=true" >> $GITHUB_OUTPUT
              echo "is_pr_update=false" >> $GITHUB_OUTPUT
              echo "is_manual=false" >> $GITHUB_OUTPUT
              echo "Running in PR merge context"
            else
              echo "is_pr_merge=false" >> $GITHUB_OUTPUT
              echo "is_pr_update=false" >> $GITHUB_OUTPUT
              echo "is_manual=false" >> $GITHUB_OUTPUT
              echo "Running in PR update context (PR closed without merge)"
            fi
          else
            echo "is_pr_merge=false" >> $GITHUB_OUTPUT
            echo "is_pr_update=false" >> $GITHUB_OUTPUT
            echo "is_manual=true" >> $GITHUB_OUTPUT
            echo "Running in manual trigger context"
          fi
      - name: Check if repository is shallow
        id: check_shallow
        run: |
          if [ -f "$(git rev-parse --git-dir)/shallow" ]; then
            echo "is_shallow=true" >> $GITHUB_OUTPUT
          else
            echo "is_shallow=false" >> $GITHUB_OUTPUT
          fi
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets[env.MODULE_TOKEN] }}
          ref: ${{ (steps.context.outputs.is_pr_merge == 'true' && 'main') || (steps.context.outputs.is_pr_update == 'true' && github.event.pull_request.head.ref) || 'main' }}
          repository: ${{ (steps.context.outputs.is_pr_update == 'true' && github.event.pull_request.head.repo.full_name) || github.repository }}
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ env.PHP_VERSION }}'
      - name: Generate version and dates
        id: set_version
        run: |
          BASE_VERSION=$(date +'%Y.%m.%d')
          CREATION_DATE=$(date +'%Y %B %d')
          CURRENT_YEAR=$(date +'%Y')
          git fetch --tags
          if git rev-parse "$BASE_VERSION" >/dev/null 2>&1; then
            MATCHING_TAGS=$(git tag -l "$BASE_VERSION.*")
            if [ -z "$MATCHING_TAGS" ]; then
              VERSION="${BASE_VERSION}.1"
            else
              HIGHEST_SUBVERSION=$(echo "$MATCHING_TAGS" | sed "s/^$BASE_VERSION\.//" | sort -n | tail -1)
              NEXT_SUBVERSION=$((HIGHEST_SUBVERSION + 1))
              VERSION="${BASE_VERSION}.$NEXT_SUBVERSION"
            fi
          else
            VERSION="$BASE_VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "creation_date=$CREATION_DATE" >> $GITHUB_OUTPUT
          echo "current_year=$CURRENT_YEAR" >> $GITHUB_OUTPUT
      - name: Update XML file in repository
        run: |
          XML_FILE="${{ env.MODULE_XML }}"
          if [ -f "$XML_FILE" ]; then
            cp "$XML_FILE" "${XML_FILE}.bak"
            sed -i "s|<version>.*</version>|<version>${{ steps.set_version.outputs.version }}</version>|g" "$XML_FILE"
            sed -i "s|<creationDate>.*</creationDate>|<creationDate>${{ steps.set_version.outputs.creation_date }}</creationDate>|g" "$XML_FILE"
            if [ "${{ steps.set_version.outputs.current_year }}" -gt "2025" ]; then
              sed -i "s|Copyright (C) [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}|Copyright (C) 2025 - ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$XML_FILE"
            else
              sed -i "s|Copyright (C) [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}|Copyright (C) ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$XML_FILE"
            fi
          else
            echo "::error::XML file not found in repository"
            exit 1
          fi
      - name: Cleanup backup files
        run: |
          rm -f ${{ env.MODULE_XML }}.bak updates.xml.bak CHANGELOG.md.bak || true
      - name: Update PHP file version
        run: |
          find . -name "*.php" | while read -r PHP_FILE; do
            if [ -f "$PHP_FILE" ]; then
              if grep -q "@version" "$PHP_FILE"; then
                sed -i -E "s|(@version[ ]+).*|\1${{ steps.set_version.outputs.version }}|g" "$PHP_FILE"
                sed -i -E "s|(Version[ ]*:[ ]*).*|\1${{ steps.set_version.outputs.version }}|g" "$PHP_FILE"
                sed -i -E "s|(\* Version:)[0-9]{4}\.[0-9]{2}\.[0-9]{2}|\1${{ steps.set_version.outputs.version }}|g" "$PHP_FILE"
                sed -i "s|@copyright.*|@copyright Copyright (C) ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$PHP_FILE"
              fi
            fi
          done
      - name: Update version in all files
        run: |
          find . -type f | while read -r FILE; do
            if [ -f "$FILE" ]; then
              if grep -q "\* Version:[0-9]\{4\}.[0-9]\{2\}.[0-9]\{2\}" "$FILE"; then
                sed -i -E "s|(\* Version:)[0-9]{4}\.[0-9]{2}\.[0-9]{2}|\1${{ steps.set_version.outputs.version }}|g" "$FILE"
              fi
            fi
          done
      - name: Update existing language files
        run: |
          find . -name "*.ini" -o -name "*.sys.ini" | while read -r LANG_FILE; do
            if [ -f "$LANG_FILE" ]; then
              if [ "${{ steps.set_version.outputs.current_year }}" -gt "2025" ]; then
                sed -i "s|; Copyright (C) [0-9]\{4\} - [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}|; Copyright (C) 2025 - ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$LANG_FILE"
                sed -i "s|; Copyright (C) [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}|; Copyright (C) 2025 - ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$LANG_FILE"
              else
                sed -i "s|; Copyright (C) [0-9]\{4\} - [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}|; Copyright (C) ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$LANG_FILE"
                sed -i "s|; Copyright (C) [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}|; Copyright (C) ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$LANG_FILE"
              fi
            fi
          done
      - name: Update CSS file copyright and version
        run: |
          find . -name "*.css" | while read -r CSS_FILE; do
            if [ -f "$CSS_FILE" ]; then
              if grep -q "Copyright (C)" "$CSS_FILE"; then
                if [ "${{ steps.set_version.outputs.current_year }}" -gt "2025" ]; then
                  sed -i "s|/\* Copyright (C) [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }} \*/|/* Copyright (C) 2025 - ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }} */|g" "$CSS_FILE"
                  sed -i "s|/\* Copyright (C) [0-9]\{4\} - [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }} \*/|/* Copyright (C) 2025 - ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }} */|g" "$CSS_FILE"
                  sed -i "s| \* Copyright (C) [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}| * Copyright (C) 2025 - ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$CSS_FILE"
                  sed -i "s| \* Copyright (C) [0-9]\{4\} - [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}| * Copyright (C) 2025 - ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$CSS_FILE"
                else
                  sed -i "s|/\* Copyright (C) [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }} \*/|/* Copyright (C) ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }} */|g" "$CSS_FILE"
                  sed -i "s|/\* Copyright (C) [0-9]\{4\} - [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }} \*/|/* Copyright (C) ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }} */|g" "$CSS_FILE"
                  sed -i "s| \* Copyright (C) [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}| * Copyright (C) ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$CSS_FILE"
                  sed -i "s| \* Copyright (C) [0-9]\{4\} - [0-9]\{4\} ${{ env.COPYRIGHT_HOLDER }}| * Copyright (C) ${{ steps.set_version.outputs.current_year }} ${{ env.COPYRIGHT_HOLDER }}|g" "$CSS_FILE"
                fi
              fi
              if grep -q "\* Version:[0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}" "$CSS_FILE"; then
                sed -i -E "s|(\* Version:)[0-9]{4}\.[0-9]{2}\.[0-9]{2}|\1${{ steps.set_version.outputs.version }}|g" "$CSS_FILE"
              fi
            fi
          done
      - name: Generate changelog
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --always $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          CURRENT_DATE=$(date -u +"%Y-%m-%d")
          ADDED=""
          CHANGED=""
          FIXED=""
          REMOVED=""
          SECURITY=""
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s|%h" --reverse)
          else
            COMMITS=$(git log --pretty=format:"%s|%h" ${PREVIOUS_TAG}..HEAD --reverse)
          fi
          while IFS= read -r line; do
            COMMIT_MSG=$(echo "$line" | cut -d'|' -f1)
            COMMIT_HASH=$(echo "$line" | cut -d'|' -f2)
            if [[ "$COMMIT_MSG" =~ ^(Add|Create|Implement|Feature) ]]; then
              ADDED="$ADDED\n* $COMMIT_MSG ([${COMMIT_HASH}](https://github.com/${{ github.repository }}/commit/${COMMIT_HASH}))"
            elif [[ "$COMMIT_MSG" =~ ^(Update|Improve|Enhance|Refactor|Change) ]]; then
              CHANGED="$CHANGED\n* $COMMIT_MSG ([${COMMIT_HASH}](https://github.com/${{ github.repository }}/commit/${COMMIT_HASH}))"
            elif [[ "$COMMIT_MSG" =~ ^(Fix|Bug|Correct|Resolve) ]]; then
              FIXED="$FIXED\n* $COMMIT_MSG ([${COMMIT_HASH}](https://github.com/${{ github.repository }}/commit/${COMMIT_HASH}))"
            elif [[ "$COMMIT_MSG" =~ ^(Remove|Delete|Deprecate) ]]; then
              REMOVED="$REMOVED\n* $COMMIT_MSG ([${COMMIT_HASH}](https://github.com/${{ github.repository }}/commit/${COMMIT_HASH}))"
            elif [[ "$COMMIT_MSG" =~ ^(Security) ]]; then
              SECURITY="$SECURITY\n* $COMMIT_MSG ([${COMMIT_HASH}](https://github.com/${{ github.repository }}/commit/${COMMIT_HASH}))"
            else
              CHANGED="$CHANGED\n* $COMMIT_MSG ([${COMMIT_HASH}](https://github.com/${{ github.repository }}/commit/${COMMIT_HASH}))"
            fi
          done <<< "$COMMITS"
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [${{ steps.set_version.outputs.version }}] - $CURRENT_DATE" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          if [ ! -z "$ADDED" ]; then echo "### Added" >> CHANGELOG.md; echo -e "$ADDED" >> CHANGELOG.md; echo "" >> CHANGELOG.md; fi
          if [ ! -z "$CHANGED" ]; then echo "### Changed" >> CHANGELOG.md; echo -e "$CHANGED" >> CHANGELOG.md; echo "" >> CHANGELOG.md; fi
          if [ ! -z "$FIXED" ]; then echo "### Fixed" >> CHANGELOG.md; echo -e "$FIXED" >> CHANGELOG.md; echo "" >> CHANGELOG.md; fi
          if [ ! -z "$REMOVED" ]; then echo "### Removed" >> CHANGELOG.md; echo -e "$REMOVED" >> CHANGELOG.md; echo "" >> CHANGELOG.md; fi
          if [ ! -z "$SECURITY" ]; then echo "### Security" >> CHANGELOG.md; echo -e "$SECURITY" >> CHANGELOG.md; echo "" >> CHANGELOG.md; fi
          if [ -f "CHANGELOG.md.bak" ]; then tail -n +8 "CHANGELOG.md.bak" >> CHANGELOG.md; fi
          CHANGELOG_OUTPUT=""
          if [ ! -z "$ADDED" ]; then CHANGELOG_OUTPUT="${CHANGELOG_OUTPUT}### Added\n${ADDED}\n\n"; fi
          if [ ! -z "$CHANGED" ]; then CHANGELOG_OUTPUT="${CHANGELOG_OUTPUT}### Changed\n${CHANGED}\n\n"; fi
          if [ ! -z "$FIXED" ]; then CHANGELOG_OUTPUT="${CHANGELOG_OUTPUT}### Fixed\n${FIXED}\n\n"; fi
          if [ ! -z "$REMOVED" ]; then CHANGELOG_OUTPUT="${CHANGELOG_OUTPUT}### Removed\n${REMOVED}\n\n"; fi
          if [ ! -z "$SECURITY" ]; then CHANGELOG_OUTPUT="${CHANGELOG_OUTPUT}### Security\n${SECURITY}\n\n"; fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md
      - name: Backup existing changelog
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          if [ -f "CHANGELOG.md" ]; then cp CHANGELOG.md CHANGELOG.md.bak; fi
      - name: Commit changes to PR branch
        if: steps.context.outputs.is_pr_update == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git diff --exit-code; then echo "No changes to commit"; else git add .; git commit -m "Update version to ${{ steps.set_version.outputs.version }}, creation date to ${{ steps.set_version.outputs.creation_date }}, and copyright year to ${{ steps.set_version.outputs.current_year }}"; git push origin ${{ github.event.pull_request.head.ref }}; fi
      - name: Commit changes to main branch for PR merge
        if: steps.context.outputs.is_pr_merge == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git diff --exit-code; then echo "No changes to commit"; else git add .; git commit -m "Update version to ${{ steps.set_version.outputs.version }} for release"; git push origin main; fi
      - name: Commit changes to main branch for manual run
        if: steps.context.outputs.is_manual == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git diff --exit-code; then echo "No changes to commit"; else git add .; git commit -m "Update version to ${{ steps.set_version.outputs.version }}, creation date to ${{ steps.set_version.outputs.creation_date }}, and copyright year to ${{ steps.set_version.outputs.current_year }}"; git push origin main; fi
      - name: Create package directory
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: mkdir -p package/${{ env.MODULE_NAME }}
      - name: Copy module files
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          cp ${{ env.MODULE_NAME }}.php package/${{ env.MODULE_NAME }}/
          cp ${{ env.MODULE_XML }} package/${{ env.MODULE_NAME }}/
          cp helper.php package/${{ env.MODULE_NAME }}/
          if [ -f "License.txt" ]; then cp License.txt package/${{ env.MODULE_NAME }}/; fi
          if [ -f "favicon.ico" ]; then cp favicon.ico package/${{ env.MODULE_NAME }}/; fi
          if [ -f "CHANGELOG.md" ]; then cp CHANGELOG.md package/${{ env.MODULE_NAME }}/; fi
          if [ -d "css" ]; then cp -r css package/${{ env.MODULE_NAME }}/; fi
          if [ -d "js" ]; then cp -r js package/${{ env.MODULE_NAME }}/; fi
          if [ -d "tmpl" ]; then cp -r tmpl package/${{ env.MODULE_NAME }}/; fi
          if [ -d "language" ]; then cp -r language package/${{ env.MODULE_NAME }}/; fi
          echo "Package contents:"; ls -la package/${{ env.MODULE_NAME }}/
      - name: Generate directory tree
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          apt-get update && apt-get install -y tree
          tree package/${{ env.MODULE_NAME }} > package/directory-structure.txt
      - name: Create ZIP archive
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          cd package
          zip -r ${{ env.MODULE_NAME }}_${{ steps.set_version.outputs.version }}.zip ${{ env.MODULE_NAME }}
          echo "Created ZIP archive: ${{ env.MODULE_NAME }}_${{ steps.set_version.outputs.version }}.zip"
      - name: Create GitHub Release
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.set_version.outputs.version }}
          name: Bears AI Chatbot ${{ steps.set_version.outputs.version }}
          files: |
            package/${{ env.MODULE_NAME }}_${{ steps.set_version.outputs.version }}.zip
            package/directory-structure.txt
          draft: false
          prerelease: false
          body: |
            Bears AI Chatbot Module ${{ steps.set_version.outputs.version }}
            ### Download Options:
            - Download directly from this release page
            - Access the artifact from the Actions tab of this workflow run
            ## Changelog
            ${{ steps.changelog.outputs.changelog }}
            [View full changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
        env:
          GH_PAT: ${{ secrets[env.MODULE_TOKEN] }}
      - name: Update Joomla update server XML
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          UPDATES_XML="updates.xml"
          if [ -f "$UPDATES_XML" ]; then
            cp "$UPDATES_XML" "${UPDATES_XML}.bak"
            DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ steps.set_version.outputs.version }}/${{ env.MODULE_NAME }}_${{ steps.set_version.outputs.version }}.zip"
            sed -i "s|<version>.*</version>|<version>${{ steps.set_version.outputs.version }}</version>|g" "$UPDATES_XML"
            sed -i "s|<downloadurl type=\"full\" format=\"zip\">.*</downloadurl>|<downloadurl type=\"full\" format=\"zip\">$DOWNLOAD_URL</downloadurl>|g" "$UPDATES_XML"
            echo "Updated updates.xml file with new version and download URL"
            cat "$UPDATES_XML"
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            if git diff --exit-code; then echo "No changes to commit in updates.xml"; else git add "$UPDATES_XML"; git commit -m "Update updates.xml for version ${{ steps.set_version.outputs.version }}"; git push origin main; fi
          else
            echo "::warning::updates.xml file not found in repository"
          fi
      - name: Final cleanup of backup files
        run: |
          rm -f ${{ env.MODULE_XML }}.bak updates.xml.bak CHANGELOG.md.bak || true
      - name: Upload to GitHub Artifacts
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        id: upload_artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.MODULE_NAME }}_${{ steps.set_version.outputs.version }}
          path: package/${{ env.MODULE_NAME }}_${{ steps.set_version.outputs.version }}.zip
          retention-days: 90
          if-no-files-found: warn
      - name: Artifact Download Information
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          echo "::notice::The module package has been uploaded as an artifact."
          echo "::notice::You can download it from the Actions tab of this workflow run."
          echo "::notice::Go to Actions → This workflow → This run → Artifacts section → Download '${{ env.MODULE_NAME }}_${{ steps.set_version.outputs.version }}'"
